{"version":3,"sources":["Components/Media/Githublogo.svg","Components/Chart.js","Components/AutoCompleteText.js","Components/Home.js","App.js","index.js"],"names":["module","exports","Chart","dataNumbers","this","props","chartValues","map","item","Number","value","maxValue","Math","max","minValue","min","ceil","width","className","data","margin","top","right","left","bottom","vertical","stroke","dataKey","domain","dot","strokeWidth","Component","AutoCompleteText","onTextChanged","e","items","target","suggestions","length","regex","RegExp","sort","filter","v","test","setState","text","state","callbackFromApp","key","onClick","suggestionSelected","onChange","type","renderSuggestions","React","countStockChange","end","start","toFixed","baseUrl","Home","getStockFromSearchBar","dataFromSearch","stock","stockListFromApi","find","JSON","parse","values","stockList","symbol","alert","name","updatedStockList","push","localStorage","setItem","stringify","handleStockChange","id","handleDelete","index","indexOf","splice","stockValues","endValue","startValue","stockChangeValue","currentStockChange","currentStock","setStartStock","list","stockInHandle","refreshLocalStorage","listLocal","listAPI","date","i","stockInAPI","isLoading","console","log","componentDidMount","savedStockList","getItem","baseUrlAPI","axios","get","then","response","renderStockList","renderMain","style","color","substring","CircularProgress","disableShrink","href","rel","src","Githublogo","alt","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38c65cd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Githublogo.ce89173e.svg\";","import React, {Component} from 'react';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  } from 'recharts';\nimport './ComponentStyles/Chart.css'\n\n\n\nclass Chart extends Component {\n\n    \n    render() {\n    let dataNumbers = this.props.chartValues.map(item => Number(item.value));\n\n    let maxValue = Math.max(...dataNumbers);\n    let minValue = Math.min(...dataNumbers);\n    minValue = minValue >> 0; //tällä pyöristetään minimiarvo alaspäin\n    maxValue = Math.ceil(maxValue)\n\n    return (\n        <>\n            <ResponsiveContainer width=\"60%\" className=\"Chart\" > \n                <LineChart  data={this.props.chartValues}\n                    margin={{ top: 15, right: 40, left: -15, bottom: 15 }}>\n                    <CartesianGrid vertical={false}\n                        stroke=\"#ebf3f0\" />\n                    <XAxis dataKey=\"date\" stroke=\"black\" />\n                    <YAxis domain={[minValue, maxValue]} stroke=\"black\" />\n                    <Tooltip />\n                    <Line dataKey=\"value\" stroke=\"#8984d8\" dot={false} strokeWidth=\"0.5%\" />\n                </LineChart>\n            </ResponsiveContainer >\n        </>\n\n    )\n    }\n}\n\nexport default Chart;","import React from 'react';\nimport './ComponentStyles/AutoCompleteText.css';\n\n\nexport default class AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        \n        this.state = {\n            suggestions: [],\n            text: ''\n        }\n    }\n\n    onTextChanged = (e) => {\n        const { items } = this.props;\n        const value = e.target.value;\n        let suggestions = [];\n        if(value.length> 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            suggestions = items.sort().filter(v => regex.test(v));\n            \n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    suggestionSelected (value) {\n        this.setState(() => ({\n            text: '',\n            suggestions: []\n        }))\n        this.props.callbackFromApp(value);\n    }\n\n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul >\n                {suggestions.map((item) => <li key={item} onClick={() => this.suggestionSelected(item)}> {item} </li>)}\n            </ul>\n        )\n        \n\n\n\n\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n            <div className=\"AutoCompleteText\"> \n                <input value={text} onChange={this.onTextChanged} type=\"text\" />\n                {this.renderSuggestions()}\n            </div>\n        )\n    }                      \n                    \n}","import React from 'react';  \nimport axios from 'axios'\nimport './ComponentStyles/Home.css'\nimport Chart from './Chart'\nimport AutoCompleteText from './AutoCompleteText';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Githublogo from './Media/Githublogo.svg';\n\n/** Lasketaan annettujen arvojen muutos ja palautetaan luku prosentteina\n * \n */\nconst countStockChange = (end, start) => {\n  return ( 100 * ((end - start)/start)).toFixed(2);\n}\n\n// Tätä muutetaan kun backend on AWS:llä pyörimässä 'https://osakeseuranta.net'\n// Jos halutaan tehdä muokkauksia, käytetään 'http://localhost:3001'\nconst baseUrl = 'https://osakeseuranta.net';\n                   \nclass Home extends React.Component {\n  \n    constructor(props) {\n        super(props)\n        this.state = {\n          currentStock: \"\",\n          currentStockChange: \"\",  \n          values: [],\n          stockListFromApi: [],\n          stockList: [],\n          isLoading: true\n        }\n    }\n\n      /** Metodissa \"kysytään\" AutoCompleteText luokalta hakukenttään päätyneen pörssiyhtiön nimeä ja asetetaan kyseinen pörssiyhtiö stockList -taulukkoon ja local storageen.\n       * \n       */\n      getStockFromSearchBar = (dataFromSearch) => {\n        const stock = this.state.stockListFromApi.find(item => item['name'] === dataFromSearch);\n\n        // Testataan, että API -kutsu on onnistunut\n        if (JSON.parse(stock.values).length === 0) {\n          alert(`Valitettavasti osakkeen tiedoissa on ongelma. Kokeile jotain toista osaketta.`)\n          return;\n        }\n\n        // Testataan vielä duplikaatit ennen lisäämistä\n        if(this.state.stockList.find(item => item.symbol === stock.symbol)) {\n          alert(`${stock.name} on jo listalla. Valitse toinen osake.`)\n          return;\n        } \n\n        // Mikäli ei duplikaatteja, hoidetaan lisäys sekä local storageen että stateen\n        let updatedStockList = this.state.stockList;\n        updatedStockList.push(stock)\n        localStorage.setItem('stockList', JSON.stringify(updatedStockList));\n        this.handleStockChange(stock.id)\n        this.setState({ stockList: updatedStockList })\n      }\n    \n      /** Metodissa poistetaan item -parametrina annettu objekti tallennetusta salkusta\n       * \n       */\n      handleDelete = (item) =>  {\n        // Etsitään indeksin mukaan kyseinen yksilö listasta\n        const index = this.state.stockList.indexOf(item)\n        let updatedStockList = this.state.stockList\n        updatedStockList.splice(index, 1);\n        // Lisätään päivitetyt tiedot sekä stateen että local storageen\n        localStorage.setItem('stockList', JSON.stringify(updatedStockList));\n        this.setState({ stockList: updatedStockList })\n      }\n                           \n      /** Metodissa haetaan halutun pörssiyhtiön kurssitiedot stockListFromAPI -taulukosta ja asetetaan ne values- ja currentStock muuttujien arvoiksi.\n       * \n       *\n       */\n      handleStockChange = (id) => {\n        const stock = this.state.stockListFromApi.find(item => item['id'] === id);\n        // Lasketaan osakkeen aikavälin mukainen muutos\n        const stockValues = JSON.parse(stock.values);\n        const endValue = stockValues[stockValues.length - 1].value;\n        const startValue = stockValues[0].value;\n        let stockChangeValue = countStockChange(endValue, startValue);\n        stockChangeValue += \"%\"\n\n        this.setState({ values: stockValues, currentStockChange: stockChangeValue, currentStock: stock.name })\n      }\n\n      /** Metodissa asetetaan annetun listan ensimmäinen alkio näkyväksi aloitussivulla \n       *  Käytetään vain componentDidMount() metodissa\n       */\n      setStartStock = (list) => {\n        const stock = list[0];\n        const stockValues = JSON.parse(stock.values);\n        const endValue = stockValues[stockValues.length - 1].value;\n        const startValue = stockValues[0].value;\n        let stockChangeValue = countStockChange(endValue, startValue);\n        stockChangeValue += \"%\"\n\n        const stockInHandle = stock.name;\n        this.setState({ values: stockValues, currentStockChange: stockChangeValue, currentStock: stockInHandle })\n      \n      }\n\n\n      /** Metodi saa parametriksi local storagessa tällä hetkellä olevan listan ja API:sta haetun listan ja asettaa tuoreet arvot\n       *  local storageen, mikäli arvot ovat muuttuneet\n       * \n       */\n      refreshLocalStorage = (listLocal, listAPI) => {\n        // Tarkistetaan päivämäärän mukaan onko tiedot tuoreita\n        const dateAPI = JSON.parse(listAPI[0].values)[0].date;\n        const dateLocal = JSON.parse(listLocal[0].values)[0].date;\n        if (dateAPI !== dateLocal) {\n          for (let i = 0; i < listLocal.length; i++) {\n            const stockInAPI = listAPI.find(item => item.id === listLocal[i].id)\n            listLocal[i].values = stockInAPI.values\n          }\n          localStorage.setItem('stockList', JSON.stringify(listLocal));\n        }\n        this.setState({ stockList: listLocal, isLoading: false })\n        console.log(this.state.isLoading)\n        // Asetetaan ensimmäinen osake aloitusnäkymäksi sivulle\n        this.setStartStock(listLocal)\n      }\n\n    \n      /** Metodissa haetaaan baseUrl osoitteessa olevalta serveriltä data API:ssa olevista pörssiyhtiöistä ja asetetaan ne yksilöittäin stockListFromApi -taulukkoon.\n       *  Asetetaan myös paikallisesti tallennettu data stocklist -taulukkoon, mikäli sellaista löytyy.\n       */\n      componentDidMount = () => {\n        // Seuraavaa käytetään tuotantovaiheessa, jos halutaan tyhjentää paikallisesti tallennettu data\n        //localStorage.clear(); \n        \n        const savedStockList = JSON.parse(localStorage.getItem('stockList'))\n        console.log(savedStockList)\n        if (savedStockList === null || savedStockList.length === 0) {\n            this.setState({ isLoading: false })\n        }\n\n        const baseUrlAPI = `${baseUrl}/api`;\n        axios.get(baseUrlAPI).then( (response) => {\n\n          if (savedStockList !== null) {\n            // Tuplatsekkaus, sillä savedStocklist voi olla sekä tyhjä että sen pituus voi olla 0\n            if (savedStockList.length !== 0) {\n              this.refreshLocalStorage(savedStockList, response.data)\n            }\n          }\n\n          this.setState({ stockListFromApi: response.data })\n        }) \n        \n        \n        \n      }\n    \n      /** Metodissa asetetaan näkyviin stockList taulukko, mikäli taulukko ei ole tyhjä.\n       *  \n       */\n      renderStockList = () => {\n        if (this.state.stockList.length === 0 || this.state.stockList === 0) {\n          return null;\n        }\n        \n        return (\n          <ul> \n            {this.state.stockList.map(item => <li key = {item.id}> <button className=\"Listobject\"  onClick = {() => this.handleStockChange(item.id)} > {item.name} </button> <DeleteForeverIcon onClick = {() => this.handleDelete(item)} className=\"Deletebutton\" /> </li>)}\n          </ul>\n        )\n      }\n\n\n      renderMain = () => {\n        if (this.state.stockList.length !== 0 && this.state.isLoading === false) {\n          return (\n            <>\n            <div className=\"Headers\">\n              <p className=\"Stockheader\"> {this.state.currentStock} </p> \n              <p className=\"Stockpercentage\" style={{color: Number(this.state.currentStockChange.substring(0, this.state.currentStockChange.length -1)) >= 0 ? \"green\" : \"red\"}} > {this.state.currentStockChange} </p>\n            </div>\n            <>\n              <div className=\"Container\">\n              <div className=\"Stocklist\">\n                {this.renderStockList()}\n            </div>\n              <Chart chartValues = {this.state.values}  />\n            </div>\n            <div className=\"Addstock\">\n              <p> Lisää osake </p>\n              <AutoCompleteText items={this.state.stockListFromApi.map(item => item.name)} callbackFromApp={this.getStockFromSearchBar}/>     \n            </div>  \n            </>\n            </>\n          )\n        }\n        else if (this.state.isLoading === false) { \n          return (\n            <>\n              <h1> Osakeseuranta </h1>\n              <div className=\"Mainstarter\">\n                <div className=\"Infobox\">\n                    <p> Lisää osake seurantalistaan käyttämällä hakupalkkia. Osakkeeksi on mahdollista valita mikä tahansa Helsingin\n                      pörssin osakkeista. </p> \n                </div>  \n                <div className=\"AddstockStarter\">\n                  <p> Lisää osake </p>\n                  <AutoCompleteText items={this.state.stockListFromApi.map(item => item.name)} callbackFromApp={this.getStockFromSearchBar}/>\n                </div> \n              </div>\n            </>\n          )\n        }\n        else {\n          return (\n            <div className=\"Loading\">\n              <CircularProgress disableShrink />\n            </div>\n          )\n        }\n      }\n\n      render() {\n        return (\n          <>\n            <a href=\"https://github.com/arttusa/Stocks\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <img className=\"Githublogo\" src={Githublogo} alt=\"Github Logo\" />\n            </a>\n            {this.renderMain()}\n          </>\n        )\n      }\n    \n}\nexport default Home;","import React from 'react';  \nimport './App.css';\nimport Home from './Components/Home';\n\n\n\nclass App extends React.Component {\n  \n  render() {\n    \n    return (\n      <div className=\"Wholepage\">\n       <Home />\n      </div>\n    )\n  }\n}\n\nexport default App    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render((\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    ), document.getElementById('root'));\n"],"sourceRoot":""}